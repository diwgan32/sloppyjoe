<launch>

    <arg name="world_file"  default="$(find asl_turtlebot)/world/AA274_Project.world"/>
    <param name="use_sim_time" value="true" />

    <arg name="base"      value="kobuki"/> <!-- create, roomba -->
    <arg name="battery"   value="/proc/acpi/battery/BAT0"/>  <!-- /proc/acpi/battery/BAT0 -->
    <arg name="gui" default="true"/>
    <arg name="stacks"    value="hexagons"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor" value="astra"/>  <!-- kinect, asus_xtion_pro -->
    <arg name="scan_topic"  default="scan" />
    <arg name="base_frame"  default="base_footprint"/>
    <arg name="odom_frame"  default="odom"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="use_sim_time" value="true"/>
        <arg name="debug" value="false"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="world_name" value="$(arg world_file)"/>
    </include>



    <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find asl_turtlebot)/robots/asl_turtlebot.urdf.xacro'" />
    <param name="robot_description" command="$(arg urdf_file)" />

    <!-- Gazebo model spawner -->
    <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
          args="-x '0.5' -y '0.5' -Y '0.0' -unpause -urdf -param robot_description -model mobile_base"/>

    <!-- Velocity muxer -->
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
          args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
        <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
        <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    </node>

    <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
    <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>



    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <!-- Fake laser -->
<!--     <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
                args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="/camera_depth_frame"/>
        <param name="range_min" value="0.45"/>
        <remap from="image" to="/camera/depth/image_raw"/>
        <remap from="scan" to="/scan"/>
    </node> -->

    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
        <param name="base_frame" value="$(arg base_frame)"/>
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="throttle_scans" value="2"/>
        <param name="map_update_interval" value="1.0"/>
        <param name="maxUrange" value="6.0"/>
        <param name="maxRange" value="8.0"/>
        <param name="sigma" value="0.05"/>
        <param name="kernelSize" value="1"/>
        <param name="lstep" value="0.05"/>
        <param name="astep" value="0.05"/>
        <param name="iterations" value="5"/>
        <param name="lsigma" value="0.075"/>
        <param name="ogain" value="3.0"/>
        <param name="lskip" value="0"/>
        <param name="minimumScore" value="100"/>
        <param name="srr" value="0.01"/>
        <param name="srt" value="0.02"/>
        <param name="str" value="0.01"/>
        <param name="stt" value="0.02"/>
        <param name="linearUpdate" value="0.1"/>
        <param name="angularUpdate" value="0.1"/>
        <param name="temporalUpdate" value="0.5"/>
        <param name="resampleThreshold" value="0.5"/>
        <param name="particles" value="20"/>
        <param name="xmin" value="-5.0"/>
        <param name="ymin" value="-5.0"/>
        <param name="xmax" value="5.0"/>
        <param name="ymax" value="5.0"/>

        <param name="delta" value="0.025"/>
        <param name="llsamplerange" value="0.01"/>
        <param name="llsamplestep" value="0.01"/>
        <param name="lasamplerange" value="0.005"/>
        <param name="lasamplestep" value="0.005"/>
        <remap from="scan" to="$(arg scan_topic)"/>
    </node>

    <node pkg="apriltags_ros" type="apriltag_detector_node" name="apriltag_detector" output="screen">
        <!-- Remap topic required by the node to custom topics -->
        <remap from="image_rect" to="/camera/rgb/image_raw" />
        <remap from="camera_info" to="/camera/rgb/camera_info" />

        <!-- Optional: Subscribe to the compressed stream-->
        <param name="image_transport" type="str" value="compressed" />

        <!-- Select the tag family: 16h5, 25h7, 25h9, 36h9, or 36h11(default) -->
        <param name="tag_family" type="str" value="36h11" />

        <!-- Enable projected optical measurements for more accurate tag transformations -->
        <!-- This exists for backwards compatability and should be left true for new setups -->
        <param name="projected_optics" type="bool" value="true" />

        <!-- Describe the tags -->
        <rosparam param="tag_descriptions">[{id: 0, size: 0.13, frame_id: tag_0},
                                            {id: 1, size: 0.13, frame_id: tag_1},
                                            {id: 2, size: 0.13, frame_id: tag_2},
                                            {id: 3, size: 0.13, frame_id: tag_3},
                                            {id: 4, size: 0.13, frame_id: tag_4},
                                            {id: 5, size: 0.13, frame_id: tag_5},
                                            {id: 6, size: 0.13, frame_id: tag_6},
                                            {id: 7, size: 0.13, frame_id: tag_7}]
        </rosparam>
    </node>

    <node pkg="tf" type="static_transform_publisher" name="camera_static_tf" args="0.0 0.0 .25 0.5 -0.5 0.5 -0.5 /mobile_base /camera_depth_optical_frame 100"/>
    <node pkg="tf" type="static_transform_publisher" name="footprint_static_tf" args="0.0 0.0 0.0 0.0 0.0 0.0 /base_footprint /mobile_base 100"/>

    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find asl_turtlebot)/rviz/mission.rviz"/>

</launch>
